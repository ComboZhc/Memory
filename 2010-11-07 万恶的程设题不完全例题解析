看了几个PPT，发现程设考试与程序设计大相径庭，考试考的就是猥琐...


* 有数组定义int a[2][2]={{1},{2,3}};则a[0][1]的值为: 
      A) 0 　　B) 1　　C) 2 　　D) 3 
答案A
{{1},{2,3}} => a[0] = {1,0}
自己做的实验:
int a[2][2] = {1,2,3};
 printf("%d", a[0][1]);
输出2
int a[2][2] = {{1},2,3};
 printf("%d", a[0][1]); 
输出0

其实就是{}中如果没有凑够数就往后面填0;


*对二维数组的正确说明是__C__。A、int a[][]={1,2,3,4,5,6}  B、int a[2][]={1,2,3,4,5,6}C、int a[][3]={1,2,3,4,5,6}  D、int a[2,3]={1,2,3,4,5,6}
数组的第一个维度编译器可以计算出来..第二个维度不行= =



*以下程序的运行结果是:   A)6      B)6789      C)'6'      D)789 main(  ) {   char  a[10]={'1'，'2'，'3'，'4'，'5'，'6'，'7'，'8'，'9'，0}，*p;     int  i;
          i=8;
          p=a+i;
          printf("%s\n"，p-3);
    } 
答案B
对于字符串，printf的第二个参数传入的是指针，输出的时候该指针不断自增直至指向的字符 == '\0'为止.
(好诡异的输出)


*运行以下程序将会出现：
  A）输出0123..99 B）输出0123...100 C）输出0123...101 D）其他
      main(  )
     {
        int x;
        while(x<100) {
            printf("%d",x);
            x++;
        }
     }
答案:D
Windows好像不会清空内存..于是main函数里的东西是不会被初始化的..
(呼喊, VS编译器会报错的..)


*已知int i=10;表达式"20-0<=i<=9"的值是__B__。A、0  B、1  C、19   D、20
这种就是优先级问题啊..
还有比如


main()
{    int a=1,b,c;
      a*=6+4;
      b=a>10?a:a-1;
      c=a,b;  //这里先执行c=a,后执行b(这种无意义的语句是干嘛来的= =)
      printf("%o \n %x",b,c);
}


*已知有声明int a=1.5;float b=2.5;double c=3.5;long d; 表达式c=d=++a+b++的值是 (         ) 。
答案4.0
注意类型转换啊类型转换
同理，
表达式 5 % 3 + 5 / 3 的值为 ___A__ 。 A、3  B、4  C、.666667  D、 4.666667 



*下面程序的输出结果是（D）//好把我一开始打错了
#include <stdio.h>
main()
{  int x=-1, y=4, t;
  t=(++x<0) && (y--<=0);
  printf(“%d,%d,%d\n”,x,y,t);
}
A. 1, 3, 0       B  0, 3, 0         C 1, 3, 1                D. 0, 4, 0
嗯。。短路求值的题目太阴险了。


*

nmain()
{

    int i=0,x=0;
    for (;;)
    {
      if(i= =3||i= =5)

 continue;

      if (i= =6) break;
      i++;
      s+=i;
     };
     printf("%d\n",s);
}

程序运行后的输出结果是___D____。A、10    B、13  C、21   D、程序进入死循环

不要认为编译器会自动帮你++


*以下程序运行时输出为 (26,23,21,20 )   .
main()
{  int i,j,k=30;
  for(i=6;i>=0;i-=2) {
   for(j=0;j++<=i;j++)  k--;
    printf("%d,",k);
  }
}
也不要以为编译器只会++一次..






总结： 要想过程设，就得把自己看作编译器...
